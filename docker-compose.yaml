version: '3.8'

volumes:
  indexer_es_data:
    name: indexer_es_vol
    driver: local

services:
  ##########################
  ####    Indexer DB    ####
  ##########################
  postgres:
    container_name: indexer_pg
    image: postgres:15-alpine
    volumes:
      - ./docker/ego/init.sql:/docker-entrypoint-initdb.d/1-ego.sql
      - ./docker/song/init.sql:/docker-entrypoint-initdb.d/2-song.sql
    environment:
      - POSTGRES_DB=indexer
      - POSTGRES_PASSWORD=password
    expose:
      - 5432
    ports:
      - 8432:5432

  ############################
  ####    Overture DMS    ####
  ############################
  ego:
    container_name: indexer_ego
    image: overture/ego:5.4.0
    environment:
      SERVER_PORT: 8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ego?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration"
      SPRING_PROFILES_ACTIVE: demo, auth # demo allows 
      JWT_DURATIONMS: 2147483647 # expire tokens in 24.855 days (max-int ms) for local testing
    expose:
      - 8081
    ports:
      - 8081:8081
    depends_on:
      - postgres
  object-storage:
    container_name: indexer_object_storage
    #NOTE: must use 2018-05-11 version, since the ETag rules are different. 2018 will return the part md5, anything newer will not, and score-server expects etag==md5
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    expose:
      - 9000
    ports:
      - 9000:9000
  score:
    container_name: indexer_score
    image: overture/score:5.8.1
    environment:
      SPRING_PROFILES_ACTIVE: amazon,collaboratory,prod,secure,jwt
      SERVER_PORT: 8082
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: oicr.icgc.test
      BUCKET_NAME_STATE: oicr.icgc.test
      COLLABORATORY_DATA_DIRECTORY: data
      METADATA_URL: http://song:8083
      S3_ENDPOINT: http://object-storage:8084
      S3_ACCESSKEY: minio
      S3_SECRETKEY: minio123
      S3_SIGV4ENABLED: "true"
      AUTH_JWT_PUBLICKEYURL: http://ego:8081/oauth/token/public_key
      AUTH_SERVER_URL: http://ego:8081/o/check_api_key/
      AUTH_SERVER_CLIENTID: score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.READ
      AUTH_SERVER_SCOPE_DOWNLOAD_STUDY_PREFIX: score.
      AUTH_SERVER_SCOPE_DOWNLOAD_STUDY_SUFFIX: .READ
      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.WRITE
      AUTH_SERVER_SCOPE_UPLOAD_STUDY_PREFIX: score.
      AUTH_SERVER_SCOPE_UPLOAD_STUDY_SUFFIX: .WRITE
      SERVER_SSL_ENABLED: "false"
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 12000001
      ENDPOINTS_DUMP_ENABLED: "false"
      ENDPOINTS_ENV_ENABLED: "true"
      ENDPOINTS_INFO_ENABLED: "true"
    expose:
      - 8082
    ports:
      - 8082:8082
    depends_on:
      - object-storage
      - ego
  song:
    container_name: indexer_song
    image: overture/song-server:5.0.3
    environment:
      SERVER_PORT: 8083
      MANAGEMENT_SERVER_PORT: 9083
      AUTH_JWT_PUBLICKEYURL: http://ego:8081/oauth/token/public_key
      AUTH_SERVER_URL: http://ego:8081/o/check_api_key/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_CLIENTSECRET: songsecret
      AUTH_SERVER_SCOPE_STUDY_PREFIX: song.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SCORE_URL: http://score:8082
      SCORE_CLIENTCREDENTIALS_ID: adminId
      SCORE_CLIENTCREDENTIALS_SECRET: adminSecret
      SCORE_CLIENTCREDENTIALS_TOKENURL: http://ego:8081/oauth/token
      SCORE_CLIENTCREDENTIALS_SYSTEMSCOPE: "score.WRITE"
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/song?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration"
      SPRING_PROFILES_ACTIVE: dev,noSecurityDev
    expose:
      - 8083
      - 9083
    ports:
      - 8083:8083
      - 9083:9083
    depends_on:
      - postgres
      - score
      - ego

  ######################################
  ####    Elasticsearch Services    ####
  ######################################

  elasticsearch:
    container_name: indexer_es
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
    ports:
      - 9200:9200
    volumes:
      - indexer_es_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - cluster.name=indexer.elasticsearch
      - 'ES_JAVA_OPTS=-Xms512m -Xmx2048m'
      - path.repo=/usr/share/elasticsearch

  # Rollcall is an Overture service responsible for creating versioned indices and releasing them to aliases
  rollcall:
    container_name: indexer_rollcall
    image: overture/rollcall:2.7.0
    depends_on:
      - elasticsearch
    ports:
      - 8084:8084
    environment:
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      SPRING_PROFILES_ACTIVE: test
      SERVER_PORT: 8084
      ROLLCALL_ALIASES_0_ALIAS: variant_centric
      ROLLCALL_ALIASES_0_ENTITY: variant
      ROLLCALL_ALIASES_0_TYPE: centric
      ROLLCALL_ALIASES_0_RELEASEROTATION: 0
      SPRING_CLOUD_VAULT_ENABLED: 'false'

  #####################
  ####    Kafka    ####
  #####################
  zookeeper:
    container_name: indexer_zookeeper
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper.indexer
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    container_name: indexer_broker
    image: confluentinc/cp-server:7.2.1
    hostname: kafka.indexer
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper.indexer:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka.indexer:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      ALLOW_PLAINTEXT_LISTENER: "yes"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka.indexer:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper.indexer:2181
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kafka:/kafka
